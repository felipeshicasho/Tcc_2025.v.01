@page "/login"
@using GestaoMensalidades.Web.Models
@using GestaoMensalidades.Web.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - Gestão de Mensalidades</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center">
                    <h4><i class="fas fa-sign-in-alt"></i> Login</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Senha</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle"></i> @errorMessage
                            </div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <i class="fas fa-sign-in-alt"></i> Entrar
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <small class="text-muted">
                        <i class="fas fa-info-circle"></i> 
                        Use: admin@gestaomensalidades.com / admin123
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Se já estiver logado, redireciona para a página inicial
        if (AuthService.IsAuthenticated())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var success = await AuthService.LoginAsync(loginModel);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Login realizado com sucesso!", "success");
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Email ou senha inválidos";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro interno do servidor. Tente novamente.";
            Console.WriteLine($"Erro no login: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

